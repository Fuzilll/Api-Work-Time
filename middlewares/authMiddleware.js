// Importa o m√≥dulo de configura√ß√£o do banco de dados
// Este m√≥dulo permite realizar queries ao banco de dados em outras partes do c√≥digo
const db = require('../config/db');

// Importa erros personalizados, como UnauthorizedError e ForbiddenError, para usar em valida√ß√µes
const { UnauthorizedError, ForbiddenError } = require('../errors');

// Importa a biblioteca JWT para validar e verificar tokens de autentica√ß√£o
const jwt = require('jsonwebtoken');

// Classe AuthMiddleware, respons√°vel pela autentica√ß√£o e controle de permiss√µes
class AuthMiddleware {

    // M√©todo est√°tico de autentica√ß√£o, respons√°vel por verificar o token JWT ou sess√£o do usu√°rio
    // Este m√©todo √© usado em rotas protegidas para garantir que o usu√°rio esteja autenticado
    static async autenticacao(req, res, next) {
        console.log('[AUTH] Iniciando processo de autentica√ß√£o');
        try {
            // 1. Verificar m√©todos de autentica√ß√£o
            const token = req.headers.authorization?.split(' ')[1];
            const sessionAuth = req.session?.id_usuario;

            console.log('[AUTH] Token presente:', !!token);
            console.log('[AUTH] Sess√£o presente:', !!sessionAuth);

            if (!token && !sessionAuth) {
                console.log('[AUTH] Nenhum m√©todo de autentica√ß√£o encontrado');
                throw new UnauthorizedError('Acesso n√£o autorizado');
            }

            // 2. Priorizar token JWT se existir
            if (token) {
                console.log('[AUTH] Autenticando via JWT');
                try {
                    const decoded = jwt.verify(token, process.env.JWT_SECRET);
                    console.log('[AUTH] Token decodificado:', decoded);

                    req.usuario = {
                        id: decoded.id,
                        nivel: decoded.nivel,
                        id_empresa: decoded.id_empresa
                    };
                } catch (jwtError) {
                    console.error('[AUTH] Erro na verifica√ß√£o do token:', jwtError);
                    throw new UnauthorizedError('Token inv√°lido ou expirado');
                }
            } else {
                // 3. Fallback para autentica√ß√£o por sess√£o
                console.log('[AUTH] Autenticando via sess√£o');
                const usuario = await AuthMiddleware.loadUserData(sessionAuth);
                req.usuario = AuthMiddleware.formatUserData(usuario);
            }

            // 4. Verifica√ß√µes adicionais
            if (!req.usuario) {
                console.log('[AUTH] Dados do usu√°rio n√£o encontrados');
                throw new UnauthorizedError('Dados do usu√°rio inv√°lidos');
            }

            console.log('[AUTH] Usu√°rio autenticado:', {
                id: req.usuario.id,
                nivel: req.usuario.nivel,
                empresa: req.usuario.id_empresa
            });

            AuthMiddleware.logAccess(req.usuario);
            next();

        } catch (err) {
            console.error('[AUTH] Erro na autentica√ß√£o:', {
                message: err.message,
                stack: err.stack
            });
            next(err);
        }
    }

    static async loadUserData(userId) {
        console.log('[AUTH] Carregando dados do usu√°rio ID:', userId);

        try {
            const [usuario] = await db.query(`
                SELECT 
                    u.id, u.nome, u.email, u.nivel, u.status,
                    a.id_empresa, a.permissoes, 
                    f.id_empresa as func_empresa
                FROM USUARIO u
                LEFT JOIN ADMIN a ON u.id = a.id_usuario AND u.nivel = 'ADMIN'
                LEFT JOIN FUNCIONARIO f ON u.id = f.id_usuario AND u.nivel = 'FUNCIONARIO'
                WHERE u.id = ? AND u.status = 'Ativo'
            `, [userId]);

            if (!usuario) {
                console.log('[AUTH] Usu√°rio n√£o encontrado ou inativo');
                throw new UnauthorizedError('Usu√°rio n√£o encontrado ou conta inativa');
            }

            console.log('[AUTH] Dados carregados do banco:', {
                id: usuario.id,
                nivel: usuario.nivel,
                empresa: usuario.id_empresa || usuario.func_empresa
            });

            return usuario;
        } catch (dbError) {
            console.error('[AUTH] Erro no banco de dados:', dbError);
            throw new UnauthorizedError('Erro ao verificar credenciais');
        }
    }

    static formatUserData(usuario) {
        console.log('[AUTH] Formatando dados do usu√°rio:', usuario.id);

        const userData = {
            id: usuario.id,
            nome: usuario.nome,
            email: usuario.email,
            nivel: usuario.nivel,
            status: usuario.status,
            id_empresa: usuario.id_empresa || usuario.func_empresa
        };

        // Permiss√µes para ADMIN
        if (usuario.nivel === 'ADMIN' && usuario.permissoes) {
            console.log('[AUTH] Processando permiss√µes para ADMIN');
            userData.permissoes = this.parsePermissions(usuario.permissoes);
        }

        // Permiss√µes para IT_SUPPORT
        if (usuario.nivel === 'IT_SUPPORT') {
            console.log('[AUTH] Definindo permiss√µes totais para IT_SUPPORT');
            userData.permissoes = { acesso_total: true };
        }

        return userData;
    }

    static parsePermissions(permissions) {
        try {
            console.log('[AUTH] Parseando permiss√µes:', permissions);
            return typeof permissions === 'string' ?
                JSON.parse(permissions) : permissions;
        } catch (e) {
            console.error('[AUTH] Erro ao parsear permiss√µes:', e);
            return {};
        }
    }

    static logAccess(usuario) {
        console.log(`[AUTH] üîí Acesso autorizado: ${usuario.nome} (${usuario.nivel})`);
        console.log(`[AUTH] üìå Empresa: ${usuario.id_empresa}`);
        if (usuario.permissoes) {
            console.log('[AUTH] üîë Permiss√µes:', usuario.permissoes);
        }
    }

    // M√©todo de middleware para verificar se o usu√°rio tem o n√≠vel adequado para acessar uma rota
    // Utiliza uma lista de n√≠veis requeridos para comparar com o n√≠vel do usu√°rio
    static verificarNivel(niveisRequeridos) {
        return (req, res, next) => {
            try {
                const niveis = Array.isArray(niveisRequeridos) ?
                    niveisRequeridos : // Se os n√≠veis requeridos n√£o forem uma lista, transforma em lista
                    [niveisRequeridos];

                // Verifica se o n√≠vel do usu√°rio est√° entre os n√≠veis permitidos
                if (!niveis.includes(req.usuario.nivel)) {
                    throw new ForbiddenError(
                        `Requer n√≠vel: ${niveis.join(' ou ')}` // Caso o n√≠vel n√£o seja v√°lido, lan√ßa um erro
                    );
                }
                next(); // Caso o n√≠vel seja permitido, chama o pr√≥ximo middleware
            } catch (err) {
                next(err); // Caso ocorra um erro, passa para o pr√≥ximo middleware de erro
            }
        };
    }
    
    static checkPermission(permission) {
        return (req, res, next) => {
            try {
                // IT_SUPPORT tem acesso total
                if (req.usuario.nivel === 'IT_SUPPORT') return next();

                // ADMIN precisa ter a permiss√£o espec√≠fica
                if (req.usuario.nivel === 'ADMIN') {
                    if (req.usuario.permissoes && req.usuario.permissoes[permission]) {
                        return next();
                    }
                }

                throw new ForbiddenError(`Permiss√£o necess√°ria: ${permission}`);
            } catch (err) {
                next(err);
            }
        };
    }

    // M√©todo de middleware para verificar se o usu√°rio tem a permiss√£o necess√°ria para acessar uma rota
    static verificarPermissao(permissaoRequerida) {
        return (req, res, next) => {
            try {
                // Se o usu√°rio for IT_SUPPORT, ele ter√° permiss√£o para tudo
                if (req.usuario.nivel === 'IT_SUPPORT') return next();

                // Se o usu√°rio for ADMIN e tiver a permiss√£o, permite o acesso
                if (req.usuario.nivel === 'ADMIN' &&
                    req.usuario.permissoes?.[permissaoRequerida]) {
                    return next();
                }

                // Caso contr√°rio, lan√ßa um erro de permiss√£o negada
                throw new ForbiddenError(
                    `Permiss√£o necess√°ria: ${permissaoRequerida}`
                );
            } catch (err) {
                next(err); // Passa o erro para o pr√≥ximo middleware de erro
            }
        };
    }

    // Middleware que verifica se o usu√°rio tem permiss√£o para acessar os dados de uma determinada empresa
    static verificarEmpresa() {
        return async (req, res, next) => {
            try {
                // Verifica o ID da empresa fornecido nos par√¢metros ou no corpo da requisi√ß√£o
                const idEmpresaParam = req.params.id_empresa || req.body.id_empresa;

                // Se o usu√°rio for IT_SUPPORT, ele tem permiss√£o para acessar qualquer empresa
                if (req.usuario.nivel === 'IT_SUPPORT') return next();

                // Se o usu√°rio for ADMIN e a empresa for a mesma que ele tem acesso, permite o acesso
                if (req.usuario.nivel === 'ADMIN' &&
                    req.usuario.id_empresa == idEmpresaParam) {
                    return next();
                }

                // Se o usu√°rio for FUNCIONARIO e a empresa for a mesma que ele trabalha, permite o acesso
                if (req.usuario.nivel === 'FUNCIONARIO' &&
                    req.usuario.id_empresa == idEmpresaParam) {
                    return next();
                }

                // Caso contr√°rio, lan√ßa um erro de permiss√£o
                throw new ForbiddenError(
                    'Sem permiss√£o para acessar dados desta empresa'
                );
            } catch (err) {
                next(err); // Passa o erro para o pr√≥ximo middleware de erro
            }
        };
    }
}


// Exporta a classe AuthMiddleware para ser utilizada em outras partes do c√≥digo
module.exports = AuthMiddleware;
